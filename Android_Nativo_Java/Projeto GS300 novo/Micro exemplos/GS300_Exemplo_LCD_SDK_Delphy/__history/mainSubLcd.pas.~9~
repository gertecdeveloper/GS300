unit mainSubLcd;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes,
  System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.TextLayout,
  FMX.Controls.Presentation, FMX.StdCtrls, SdkPlugin, Androidapi.Helpers,
  Androidapi.JNI.GraphicsContentViewText, Androidapi.JNIBridge, System.IOUtils,
  Androidapi.JNI.JavaTypes, system.Threading;

type
  TForm1 = class(TForm)
    btnPropaganda: TButton;
    StyleBook1: TStyleBook;
    Label1: TLabel;
    btnTexto: TButton;
    btnScanner: TButton;
    procedure btnPropagandaClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnTextoClick(Sender: TObject);
    procedure btnScannerClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    subLcd: JSubLcd;

  procedure LoadAndDisplayImages;

  end;

var
  Form1: TForm1;

 implementation

{$R *.fmx}

procedure TForm1.btnScannerClick(Sender: TObject);
begin

  subLcd.sendScan;
end;

procedure TForm1.btnTextoClick(Sender: TObject);
var
  Text: String;

begin
  Text := 'GS300 Terminal PDV';
  subLcd.sendText(StringToJString(Text),
    TJLayout_Alignment.JavaClass.ALIGN_NORMAL, 60);
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  subLcd := TJSubLcd.JavaClass.init(TAndroidHelper.Context);
  // subLcd.init(TAndroidHelper.Context);

end;

procedure TForm1.btnPropagandaClick(Sender: TObject);
//var
  // Extras: JBundle;
{  ImagePath: string;
  Bitmap: TBitmap;
  ImageStream: TMemoryStream;
  ImageBitmap: JBitmap;
  JavaArray: TJavaArray<Byte>;
  I: Integer;   }
begin
{  ImagePath := TPath.Combine(TPath.GetDocumentsPath, 'image1.jpeg');
  Bitmap := TBitmap.Create;
  ImageStream := TMemoryStream.Create;
  try
    Bitmap.LoadFromFile(ImagePath);
    Bitmap.SaveToStream(ImageStream);

    // Criando um TJavaArray<Byte> com o mesmo tamanho do TMemoryStream
    JavaArray := TJavaArray<Byte>.Create(ImageStream.Size);

    // Copiando os dados do TMemoryStream para o TJavaArray<Byte>
    ImageStream.Position := 0;
    for I := 0 to ImageStream.Size - 1 do
    begin
      JavaArray[I] := PByte(ImageStream.Memory)[I];
    end;

    // Decodificando TJavaArray<Byte> em JBitmap
    ImageBitmap := TJBitmapFactory.JavaClass.decodeByteArray(JavaArray, 0,
      JavaArray.Length);

    subLcd.sendBitmap(ImageBitmap);       }
    LoadAndDisplayImages;

 { finally
    Bitmap.Free;
    ImageStream.Free;
    JavaArray.Free;
  end;   }
end;


procedure TForm1.LoadAndDisplayImages;
var
  ImagePaths: array [0 .. 3] of string;
  JavaArrayList: JArrayList;
  JavaArray: TJavaArray<Byte>;
  ImageBitmap: JBitmap;
  pluginEasyLayerReturn: Boolean;
  I: Integer;

   bp, bpp, bpb, bpbp: JBitmap;
  Timer1, Timer2, Timer3, Timer4: TTimer;


begin

  {bp := TBitmap.Create;
  bpp := TBitmap.Create;
  bpb := TBitmap.Create;
  bpbp := TBitmap.Create;      }

  // Definir caminhos das imagens
  ImagePaths[0] := TPath.Combine(TPath.GetDocumentsPath, 'image1.jpeg');
  ImagePaths[1] := TPath.Combine(TPath.GetDocumentsPath, 'image2.jpeg');
  ImagePaths[2] := TPath.Combine(TPath.GetDocumentsPath, 'image3.jpeg');
  ImagePaths[3] := TPath.Combine(TPath.GetDocumentsPath, 'image4.jpeg');

  bp:= TJBitmapFactory.JavaClass.decodeFile(StringToJString(ImagePaths[0]));
  bpp:= TJBitmapFactory.JavaClass.decodeFile(StringToJString(ImagePaths[1]));
  bpb:= TJBitmapFactory.JavaClass.decodeFile(StringToJString(ImagePaths[2]));
  bpbp:= TJBitmapFactory.JavaClass.decodeFile(StringToJString(ImagePaths[3]));


    TTask.Run(procedure () begin
      TThread.Synchronize(TThread.CurrentThread, Procedure () begin
        subLcd.sendBitmap(bp);
      end);
      sleep (2000);
    end);
    TTask.Run(procedure () begin
      TThread.Synchronize(TThread.CurrentThread, Procedure () begin
        subLcd.sendBitmap(bpp);
        sleep (4000);
      end);
    end);
    TTask.Run(procedure () begin
      TThread.Synchronize(TThread.CurrentThread, Procedure () begin
        subLcd.sendBitmap(bpb);
      end);
       sleep (6000);
    end);
     TTask.Run(procedure () begin
      TThread.Synchronize(TThread.CurrentThread, Procedure () begin
        subLcd.sendBitmap(bpbp);
      end);
       sleep (9000);
    end);

   { Timer1 := TTimer.Create(nil);
    Timer1.Interval := 2000;
    Timer1.OnTimer := procedure(Sender: TObject)
      begin
        subLcd.sendBitmap(bp);
        Timer1.Free;
      end;
    Timer1.Enabled := True;

    Timer2 := TTimer.Create(nil);
    Timer2.Interval := 4000;
    Timer2.OnTimer := procedure(Sender: TObject)
      begin
        subLcd.sendBitmap(bpp);
        Timer2.Free;
      end;
    Timer2.Enabled := True;

    Timer3 := TTimer.Create(nil);
    Timer3.Interval := 6000;
    Timer3.OnTimer := procedure(Sender: TObject)
      begin
        subLcd.sendBitmap(bpb);
        Timer3.Free;
      end;
    Timer3.Enabled := True;

    Timer4 := TTimer.Create(nil);
    Timer4.Interval := 9000;
    Timer4.OnTimer := procedure(Sender: TObject)
      begin
        subLcd.sendBitmap(bpbp);
        Timer4.Free;
      end;
    Timer4.Enabled := True;       }

    // Iniciar carrossel de imagens no display secundário
   // pluginEasyLayerReturn := pluginEasyLayer.startCarrossel(JavaArrayList);
   // ShowMessage('Start: ' + BoolToStr(pluginEasyLayerReturn, True));
 // finally
    // JavaArrayList.Free;
 // end;
end;




end.
